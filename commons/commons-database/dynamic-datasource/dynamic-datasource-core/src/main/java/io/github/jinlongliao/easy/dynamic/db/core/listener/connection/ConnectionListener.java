/**
 * Copyright 2020-2021 JinlongLiao
 * <p>
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//package io.github.jinlongliao.easy.db.core.listener.connection;
//
//import java.sql.*;
//import java.util.Map;
//import java.util.Properties;
//import java.util.concurrent.Executor;
//
///**
// * @author liaojinlong
// * @since 2020/9/14 16:09
// */
//public interface ConnectionListener {
//    default void beforeCreateStatement(Connection connection) throws SQLException {
//    }
//
//    default Statement afterCreateStatement(Connection connection, Statement statement) throws SQLException {
//        return statement;
//    }
//
//    default void beforePrepareStatement(Connection connection, String sql) throws SQLException {
//    }
//
//    default PreparedStatement beforePrepareStatement(Connection connection, String sql, PreparedStatement preparedStatement) throws SQLException {
//        return preparedStatement;
//    }
//
//    default void beforePrepareCall(Connection connection, String sql) throws SQLException {
//    }
//
//    default CallableStatement afterPrepareCall(Connection connection, String sql, CallableStatement callableStatement) throws SQLException {
//        return callableStatement;
//    }
//
//    default void beforeNativeSQL(Connection connection, String sql) throws SQLException {
//    }
//
//    default String afterNativeSQL(Connection connection, String sql, String nativeSQL) throws SQLException {
//        return nativeSQL;
//    }
//
//
//    default Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
//        return null;
//    }
//
//    default PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
//        return null;
//    }
//
//    default CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
//        return null;
//    }
//
//    default PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
//        return null;
//    }
//
//    default PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
//        return null;
//    }
//
//    default PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
//        return null;
//    }
//}
